# LAMMPS input script for Green-Kubo dumbbell simulation

variable    slurmid getenv SLURM_JOB_ID
shell       mkdir restart
shell       mkdir out/${slurmid}
log         out/${slurmid}/loginit.out

# settings
variable    restart index 0
variable    rho equal 0.20
variable    f_active equal 5
variable    gamma equal 2
variable    gammainv equal 1/${gamma}
variable    T equal 1.0                       # Temperature (energy units)
variable    dt equal 0.002                    # Time step should be small enough to resolve correlation functions
variable    sigma_d equal 1.122462048309373   # 2^(1/6)
variable    rcut equal ${sigma_d}

variable    L equal 50
variable    s equal 1          # Nevery
variable    p equal 2000       # Nrepeat
variable    d equal 1000000    # Nfreq

# problem setup
units       lj
dimension   2
atom_style  bond
neigh_modify    delay 0 every 1
bond_style      harmonic
newton          on off
comm_modify     vel yes cutoff 2.5


# Make dumbbells:
lattice         sq ${rho}  # Set the lattice density for dumbbells.
region          simbox block 0 $L 0 $L -0.1 0.1
create_box      2 simbox &
                bond/types 1 &
                extra/bond/per/atom 1
molecule        dumbbell mymol.txt
create_atoms    0 region simbox mol dumbbell 323324  # Create dumbbells

# Write out the simulation parameters for post-processing:
variable        ly equal ly
variable        lx equal lx
print           '{'                              file   params.json
print           '   "lx": ${lx},'                append params.json
print           '   "ly": ${ly},'                append params.json
print           '   "rho": ${rho},'              append params.json
print           '   "f_active": ${f_active},'    append params.json
print           '   "rcut": ${rcut},'            append params.json
print           '   "dt": ${dt},'                append params.json
print           '}'                              append params.json

# Filesystem operations
if "${restart} == 1" then &
    "clear" &
    "read_restart    restart/tmp.restart.*"

# Define interactions
pair_style      lj/cut ${rcut}
pair_coeff      * * 1 1
pair_modify     shift yes
bond_style      harmonic              # E = k*(r-r0)^2
bond_coeff      1  100  1             # First parameter is k, second is r0
mass            * 1.0

# Define fixes that affect dynamics
fix             1 all nve
fix             3 all langevin $T $T ${gammainv} 323324
compute         thermal all temp/partial 0 1 0
fix_modify      3 temp thermal                           # Impose bath interactions only in the y-direction
fix             2 all dumbbell ${f_active}               # Add active driving force
fix             2d all enforce2d


# Equilibration run
if "${restart} == 1" then &
    "jump SELF production_run"
write_dump      all xyz init.xyz
velocity        all create $T 323324
thermo          1000
thermo_style    custom step temp press cpu spcpu
timestep        0.001
run             10000
timestep        0.005
run             10000000 upto

# Production run: compute stress correlator using running avg
label           production_run
log             out/${slurmid}/log.out
timestep        ${dt}

# Kinetic stress of full dumbbell
compute         mytemp all temp
compute         stressk all pressure mytemp ke
variable        pxxk equal c_stressk[1]
variable        pxyk equal c_stressk[4]
variable        pyxk equal c_stressk[4]
variable        pyyk equal c_stressk[2]

# Virial stress of full dumbbell
compute         stressv all pressure NULL virial
variable        pxxv equal c_stressv[1]
variable        pxyv equal c_stressv[4]
variable        pyxv equal c_stressv[4]
variable        pyyv equal c_stressv[2]

# Active stress of full dumbbell
compute         stressa all activestress ${f_active}
variable        pxxa equal c_stressa[1]
variable        pxya equal c_stressa[2]
variable        pyxa equal c_stressa[3]
variable        pyya equal c_stressa[4]

variable        pxx equal pxx+c_stressa[1]
variable        pxy equal pxy+c_stressa[2]
variable        pyx equal pxy+c_stressa[3]
variable        pyy equal pyy+c_stressa[4]

fix             avgstress all ave/time 1 1 1 v_pxx v_pxy v_pyx v_pyy &
                ave running

fix             avgstress_decomp all ave/time 1 1 1 &
                v_pxxk v_pxyk v_pyxk v_pyyk &
                v_pxxv v_pxyv v_pyxv v_pyyv &
                v_pxxa v_pxya v_pyxa v_pyya &
                ave running

fix             avgstress_file all ave/time 10 1000 10000 v_pxx v_pxy v_pyx v_pyy &
                ave running file out/${slurmid}/avg.gk.out

fix             avgstress_decomp_file all ave/time 10 1000 10000 &
                v_pxxk v_pxyk v_pyxk v_pyyk &
                v_pxxv v_pxyv v_pyxv v_pyyv &
                v_pxxa v_pxya v_pyxa v_pyya &
                ave running file out/${slurmid}/avg.decomp.out

variable        dpxx equal v_pxx-f_avgstress[1]
variable        dpxy equal v_pxy-f_avgstress[2]
variable        dpyx equal v_pyx-f_avgstress[3]
variable        dpyy equal v_pyy-f_avgstress[4]

variable        dpxxk equal v_pxxk-f_avgstress_decomp[1]
variable        dpxyk equal v_pxyk-f_avgstress_decomp[2]
variable        dpyxk equal v_pyxk-f_avgstress_decomp[3]
variable        dpyyk equal v_pyyk-f_avgstress_decomp[4]

variable        dpxxv equal v_pxxv-f_avgstress_decomp[5]
variable        dpxyv equal v_pxyv-f_avgstress_decomp[6]
variable        dpyxv equal v_pyxv-f_avgstress_decomp[7]
variable        dpyyv equal v_pyyv-f_avgstress_decomp[8]

variable        dpxxa equal v_pxxa-f_avgstress_decomp[9]
variable        dpxya equal v_pxya-f_avgstress_decomp[10]
variable        dpyxa equal v_pyxa-f_avgstress_decomp[11]
variable        dpyya equal v_pyya-f_avgstress_decomp[12]

variable        scale equal vol*$s*dt  # Needs to be divided by temperature
fix             SS all ave/correlate $s $p $d v_dpxx v_dpxy v_dpyx v_dpyy &
                type full prefactor ${scale} &
                file out/${slurmid}/profile.gk.out
fix             SS_running all ave/correlate $s $p $d v_dpxx v_dpxy v_dpyx v_dpyy &
                type full ave running overwrite prefactor ${scale} &
                file out/${slurmid}/profile.running.out

variable        lambda2 equal trap(f_SS[8])  # Integrate to get shear viscosity
variable        lambda4 equal trap(f_SS[5])  # Integrate to get odd viscosity

fix             SS_decomp all ave/correlate $s $p $d &
                v_dpxxk v_dpxyk v_dpyxk v_dpyyk &
                v_dpxxv v_dpxyv v_dpyxv v_dpyyv &
                v_dpxxa v_dpxya v_dpyxa v_dpyya &
                type full prefactor ${scale} &
                file out/${slurmid}/profile.decomp.out

# Average temperature for denominator in GK formula
variable        temp equal temp
compute         tempcom all temp/dumbbell
variable        atomv atom vx
compute         tempcomall all reduce sum v_atomv
variable        tempcomall equal c_tempcomall^2/atoms
variable        vx equal vcm(all,x)
variable        vy equal vcm(all,y)
fix             avgtemp all ave/time 100 100 10000 v_temp c_tempcom v_tempcomall v_vx v_vy &
                file out/${slurmid}/avg.temperature.out


dump            traj all xyz 100000 out/${slurmid}/traj.xyz
restart         100000 restart/tmp.restart
thermo_style    custom step temp press cpu spcpu
thermo          1000
run             1000000000 upto
write_dump      all xyz final.xyz
