# LAMMPS input script for Periodic Poiseulle simulation

variable    slurmid getenv SLURM_JOB_ID
shell       mkdir restart
shell       mkdir out/${slurmid}
log         out/${slurmid}/loginit.out

# settings
variable    restart index 0
variable    rho equal 0.20
variable    f_active equal 5
variable    gamma equal 2
variable    gammainv equal 1/${gamma}
variable    T equal 1.0                       # Temperature (energy units)
variable    g equal 0.002                     # Body force right
variable    ng equal -$g                      # Body force left
variable    sigma_d equal 1.122462048309373   # 2^(1/6)
variable    rcut equal ${sigma_d}

variable    L equal 100
variable    W equal 50
variable    mid equal $L/2


# problem setup
units       lj
dimension   2
atom_style  bond
neigh_modify    delay 0 every 1
newton on off
comm_modify     vel yes cutoff 2.5

# Make dumbbells:
lattice         sq ${rho}  # Set the lattice density for dumbbells.
region          simbox block 0 $W 0 $L -0.1 0.1
create_box      2 simbox &
                bond/types 1 &
                extra/bond/per/atom 1
molecule        dumbbell mymol.txt
create_atoms    0 region simbox mol dumbbell 323324  # Create dumbbells, using Slurm ID as random seed

# Write out the simulation parameters for post-processing:
variable        ly equal ly
variable        lx equal lx
print           '{'                              file   params.json
print           '   "lx": ${lx},'                append params.json
print           '   "ly": ${ly},'                append params.json
print           '   "gx": $g,'                   append params.json
print           '   "rho": ${rho},'              append params.json
print           '   "f_active": ${f_active},'    append params.json
print           '   "rcut": ${rcut},'            append params.json
print           '}'                              append params.json

# Filesystem operations
if "${restart} == 1" then &
    "clear" &
    "read_restart    restart/tmp.restart.*"

# Define interactions
pair_style      lj/cut ${rcut}
pair_coeff      * * 1 1
pair_modify     shift yes
bond_style      harmonic      # E = k*(r-r0)^2
bond_coeff      1  100  1     # First parameter is k, second is r0
mass            * 1.0

# Define fixes that affect dynamics
fix             1 all nve
fix             3 all langevin $T $T ${gammainv} 323324
compute         thermal all temp/partial 0 1 0
fix_modify      3 temp thermal                             # Impose bath interactions only in the y-direction
region          lo block 0 $L 0 ${mid} -0.1 0.1
region          hi block 0 $L ${mid} $L -0.1 0.1
fix             aflo all addforce $g 0.0 0.0 region lo     # Add body force right
fix             afhi all addforce ${ng} 0.0 0.0 region hi  # Add body force left
fix             mom all momentum 10000 linear 1 1 0        # Remove center of mass velocity every N timesteps
fix             2 all dumbbell ${f_active}                 # Add CCW driving force
fix             2d all enforce2d

# Equilibration run
if "${restart} == 1" then &
    "jump SELF production_run"
write_dump      all xyz init.xyz
minimize        1.0e-6 1.0e-8 1000 10000
velocity        all create $T 323324
thermo          1000
timestep        0.002
run             10000
timestep        0.005
run             10000000  # Long equilibration to establish velocity profile

# Production run
label           production_run
log             out/${slurmid}/log.out
timestep        0.005

# Define computes and compute-related fixes
# Kinetic stress of full dumbbell
compute         temp all temp/profile 1 0 0 y 100
compute         stressk all stress/atom temp ke
variable        pxxk atom c_stressk[1]
variable        pxyk atom c_stressk[4]
variable        pyxk atom c_stressk[4]
variable        pyyk atom c_stressk[2]

# Virial stress of full dumbbell
compute         stressv all stress/atom temp virial
variable        pxxv atom c_stressv[1]
variable        pxyv atom c_stressv[4]
variable        pyxv atom c_stressv[4]
variable        pyyv atom c_stressv[2]

# Active stress of full dumbbell
compute         stressa all activestress/atom ${f_active}
variable        pxxa atom c_stressa[1]
variable        pxya atom c_stressa[2]
variable        pyxa atom c_stressa[3]
variable        pyya atom c_stressa[4]


compute         angle all dumbbellangle/atom
compute         ave_angle all reduce ave c_angle

compute         cclayers all chunk/atom bin/1d y center 0.02 units reduced
compute         ccmol all chunk/atom molecule
compute         vcm all vcm/chunk ccmol
compute         vcm_all all chunk/spread/atom ccmol c_vcm[*]
compute         angmom all angmom/chunk ccmol
compute         angmom_atom all chunk/spread/atom ccmol c_angmom[3]
compute         ave_angmom all reduce ave c_angmom_atom
fix             5 all ave/chunk 10 100000 1000000 cclayers &
                vx c_angmom_atom v_pxxk v_pxyk v_pyxk v_pyyk v_pxxv v_pxyv v_pyxv v_pyyv &
                v_pxxa v_pxya v_pyxa v_pyya density/number c_angle &
                file out/${slurmid}/vx_profile.out

variable        temp equal temp
compute         tempcom all temp/dumbbell
variable        atomv atom vx
compute         tempcomall all reduce sum v_atomv
variable        tempcomall equal c_tempcomall^2/atoms
variable        vx equal vcm(all,x)
variable        vy equal vcm(all,y)
fix             avgtemp all ave/time 100 100 10000 v_temp c_tempcom v_tempcomall v_vx v_vy &
                file out/${slurmid}/avg.temperature.out


dump            traj all xyz 10000 out/${slurmid}/traj.xyz
restart         10000 restart/tmp.restart
thermo          10000
thermo_style    custom step temp press cpu spcpu cpuremain
run             500000000 upto
write_dump      all xyz final.xyz
